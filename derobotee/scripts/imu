#!/usr/bin/env python
import math
import roslib
import rospy
import serial
import struct
from std_msgs.msg import Int32
from std_msgs.msg import Int32
from sensor_msgs.msg import Imu
from geometry_msgs.msg import Vector3
from struct import unpack
from tf.transformations import quaternion_from_euler
ANGULAR_V_FACTOR = 7*math.pi/65536
ANGULAR_FACTOR = 2*math.pi/65536
LINEAR_FACTOR = 20*9.80665/65536.0

class Imu_sensor():

    def __init__(self):

        self.imu_pub_ = rospy.Publisher('/imu', Imu, queue_size=10, latch=True)
        self.ser_ = serial.Serial(port='/dev/IMU', baudrate=115200, stopbits=serial.STOPBITS_ONE, parity=serial.PARITY_NONE)
        reset_v = '\x4c\x53\x53\x52\x00\x7e\x4f'
        self.ser_.write(reset_v)
    def spin(self):
        r = rospy.Rate(200)
        while not rospy.is_shutdown():
            self.update()
            r.sleep()
    def update(self):
        h = self.ser_.read_until('\x7f\x80')
        if len(h) < 23:
           print 'ignore message'
           print h
           print 'waitting message output buffer', self.ser_.out_waiting
           print 'waitting message input buffer', self.ser_.in_waiting
           self.ser_.reset_input_buffer
           return
        imu = Imu()
        imu.header.stamp = rospy.Time.now()
        imu.header.frame_id = 'imu_link'
        imu.linear_acceleration.x = unpack('<h', h[0:2])[0]*LINEAR_FACTOR
        imu.linear_acceleration.y = unpack('<h', h[2:4])[0]*LINEAR_FACTOR
        imu.linear_acceleration.z = unpack('<h', h[4:6])[0]*LINEAR_FACTOR
        imu.angular_velocity.x = unpack('<h', h[6:8])[0]*ANGULAR_V_FACTOR
        imu.angular_velocity.y = unpack('<h', h[8:10])[0]*ANGULAR_V_FACTOR
        imu.angular_velocity.z = unpack('<h', h[10:12])[0]*ANGULAR_V_FACTOR
        theta_x = unpack('<h', h[12:14])[0]*ANGULAR_FACTOR
        theta_y = unpack('<h', h[14:16])[0]*ANGULAR_FACTOR
        theta_z = unpack('<h', h[16:18])[0]*ANGULAR_FACTOR
        q = quaternion_from_euler(theta_x, theta_y, theta_z)
        imu.orientation.x = q[0]
        imu.orientation.y = q[1]
        imu.orientation.z = q[2]
        imu.orientation.w = q[3]
        self.imu_pub_.publish(imu)
if __name__ == '__main__':
    rospy.init_node('imu_node')
    try:
        ne = Imu_sensor()
        ne.spin()
    except rospy.ROSInterruptException: pass
