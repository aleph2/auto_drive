#!/usr/bin/env python
import numpy as np
import roslib
import rospy
import tf
import actionlib
from sparrow_planner.msg import sparrowAction
from geometry_msgs.msg import Polygon
from nav_msgs.msg import Path
from geometry_msgs.msg import PoseStamped
import utils
class FollowPathTester(object):
    def __init__(self):
        self.path_pub = rospy.Publisher('/move_base/SparrowPlanner/grinding_path', Path, queue_size=10, latch=True)
        rospy.init_node('follow_path_test')

    def makePose(self, point):
        print "construct pose from point", point
        pose = PoseStamped()
        pose.header.stamp = rospy.Time.now()
        pose.header.frame_id = "map"
        pose.pose.position.x = point[0]
        pose.pose.position.y = point[1]
        pose.pose.position.z = 0

        quaternion = tf.transformations.quaternion_from_euler(0, 0, 0)
        pose.pose.orientation.x = quaternion[0]
        pose.pose.orientation.y = quaternion[1]
        pose.pose.orientation.z = quaternion[2]
        pose.pose.orientation.w = quaternion[3]
        return pose

    def publishPath(self):
        points = np.array([[.0,.0],[5.0,5.0]])
        poses = map(lambda p:self.makePose(p), points)
        path = Path()
        path.poses.extend(poses)
        print 'begin----'
        self.path_pub.publish(path)
        print 'end----'
        

if __name__ == '__main__':
    fpt = FollowPathTester()
    r = rospy.Rate(0.1) 
    while not rospy.is_shutdown():
        fpt.publishPath()
        r.sleep()


